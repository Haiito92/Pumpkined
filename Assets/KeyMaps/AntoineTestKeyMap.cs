//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/KeyMaps/AntoineTestKeyMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @AntoineTestKeyMap: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @AntoineTestKeyMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""AntoineTestKeyMap"",
    ""maps"": [
        {
            ""name"": ""TestControls"",
            ""id"": ""ffff919b-2a9c-4683-a1d1-25992fa27f4a"",
            ""actions"": [
                {
                    ""name"": ""TestAction"",
                    ""type"": ""Button"",
                    ""id"": ""73943f19-a7af-48df-b654-7843033f65c9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""b585288e-f436-4715-bfc2-2f94ddd9795b"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TestAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // TestControls
        m_TestControls = asset.FindActionMap("TestControls", throwIfNotFound: true);
        m_TestControls_TestAction = m_TestControls.FindAction("TestAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // TestControls
    private readonly InputActionMap m_TestControls;
    private List<ITestControlsActions> m_TestControlsActionsCallbackInterfaces = new List<ITestControlsActions>();
    private readonly InputAction m_TestControls_TestAction;
    public struct TestControlsActions
    {
        private @AntoineTestKeyMap m_Wrapper;
        public TestControlsActions(@AntoineTestKeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @TestAction => m_Wrapper.m_TestControls_TestAction;
        public InputActionMap Get() { return m_Wrapper.m_TestControls; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TestControlsActions set) { return set.Get(); }
        public void AddCallbacks(ITestControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_TestControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TestControlsActionsCallbackInterfaces.Add(instance);
            @TestAction.started += instance.OnTestAction;
            @TestAction.performed += instance.OnTestAction;
            @TestAction.canceled += instance.OnTestAction;
        }

        private void UnregisterCallbacks(ITestControlsActions instance)
        {
            @TestAction.started -= instance.OnTestAction;
            @TestAction.performed -= instance.OnTestAction;
            @TestAction.canceled -= instance.OnTestAction;
        }

        public void RemoveCallbacks(ITestControlsActions instance)
        {
            if (m_Wrapper.m_TestControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITestControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_TestControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TestControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TestControlsActions @TestControls => new TestControlsActions(this);
    public interface ITestControlsActions
    {
        void OnTestAction(InputAction.CallbackContext context);
    }
}
